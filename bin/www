#!/usr/bin/env node

var app = require('../app');
var fs = require('fs');
var path = require('path');
var http = require('http');
var cluster = require('cluster');
var config = require('../config');
var utils = require('../utils');

// 初始化日志配置
var pomeloLogger = require('pomelo-logger');
for (var i = 0; i < config.log.appenders.length; ++i) {
    var appender = config.log.appenders[i];
    if (appender.type == 'file' && !appender.absolute) {
        appender.filename = path.join(__dirname, '../', appender.filename);
        appender.absolute = true;
    }
}
pomeloLogger.configure(config.log);
var logger = pomeloLogger.getLogger('server', require('path').basename(__filename), process.pid);

// 开发环境下不使用cluster
if (app.get('env') === 'development') {
    startServer();
    return;
}

// 生产环境下使用cluster充分利用多核CPU资源
if (cluster.isMaster) {
    var numCPUs = require('os').cpus().length;
    for (var i = 0; i < numCPUs; ++i) {
        cluster.fork();
    }

    cluster.on('online', function(worker) {
        logger.trace('Cluster worker #%d is running', worker.id);
    });
    cluster.on('listening', function(worker, address) {
        //logger.trace('Cluster worker #%d is now connected to %s:%d', worker.id, address.address, address.port);
    });
    cluster.on('disconnect', function(worker) {
        logger.trace('Cluster worker #%d has disconnected', worker.id);
    });
    cluster.on('exit', function(worker, code, signal) {
        logger.trace('Cluster worker #%d died (%s), restarting...', worker.process.pid, signal || code);
        cluster.fork();
    });
} else {
    //logger.trace('Cluster worker #%d is starting...', cluster.worker.id);
    startServer();
}

// 启动服务器
// 说明: 英文注释部分的代码, 绝大部分均由Webstorm开发环境生成
function startServer() {
    // 创建配置文件中指定的目录
    for (var key in config.server.filePath) {
        var dir = config.server.filePath[key];
        dir = path.join(__dirname, '../public', dir);
        (function(dir) {
            utils.mkdirs(dir, null, function(err) {
                if (err) logger.fatal('创建目录失败: %s, %s', dir, err.message);
            });
        })(dir);
    }

    // Get port from environment and store in Express.
    var port = normalizePort(process.env.PORT || config.server.port);
    app.set('port', port);

    // Create HTTP server.
    var server = http.createServer(app);

    // Listen on provided port, on all network interfaces.
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    // Normalize a port into a number, string, or false.
    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    // Event listener for HTTP server "error" event.
    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    // Event listener for HTTP server "listening" event.
    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        logger.info('Server started, listening on %s [%s]', bind, app.get('env'));
    }
}

